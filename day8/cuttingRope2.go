package main

import "fmt"

// 剑指 Offer 14- II. 剪绳子 II
// 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m - 1] 。请问 k[0]*k[1]*...*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
//
//答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。
//
//
//
//示例 1：
//
//输入: 2
//输出: 1
//解释: 2 = 1 + 1, 1 × 1 = 1
//示例2:
//
//输入: 10
//输出: 36
//解释: 10 = 3 + 3 + 4, 3 ×3 ×4 = 36
//
//
//提示：
//
//2 <= n <= 1000
//
//来源：力扣（LeetCode）
//链接：https://leetcode.cn/problems/jian-sheng-zi-ii-lcof
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

func main() {
	n := 10
	res := cuttingRope2(n)
	fmt.Println(res)
}

func cuttingRope2(n int) int {
	if n < 4 {
		return n - 1
	}

	// 贪心算法  根据数学公式推导 尽可能将绳子以长度3 3等分为多段时，乘积最大
	// 详解去看官方的推导公式 推导的极大值点为 e 约等于 2.7
	// 因为 1 2 3 不用拆分最大  4的话拆分为 2 x 2 最大 所以这个地方最终要拆到大于4为止
	res := 1
	for n > 4 {
		res = res * 3 % 1000000007
		n -= 3
	}
	return res * n % 1000000007
}
